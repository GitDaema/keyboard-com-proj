# keyboard_presets
# 키보드 LED 기반 컴퓨터 구조 시뮬레이터용 프리셋
# - LSB = 오른쪽, MSB = 왼쪽
# - 레지스터 = 연산 중 잠깐 들고 있는 작업 공간 (SRC1, SRC2, RES)
# - 메모리 = 변수의 집 (니블 2개, 무지개 16색으로 표현)  # (메모리 니블은 별도 구현과 연동)
# - IR(F1~F12) = 현재 실행 중인 명령어
# - PC(별도 블록) = 명령어 위치

# ---------------------------------------------------------------------
# 레지스터 (작업 공간, 3개)
# ---------------------------------------------------------------------
# 주의: 배열의 '오른쪽 끝 요소'가 LSB가 되도록 배치
SRC1 = ["t", "y", "u", "i", "o", "p", "lbracket", "rbracket"]   # $s1 : 피연산자1, 8비트 (왼→오: MSB..LSB)
SRC2 = ["f", "g", "h", "j", "k", "l", "semicolon", "quote"]     # $s2 : 피연산자2, 8비트 (왼→오: MSB..LSB)
RES  = ["c", "v", "b", "n", "m", "comma", "period", "slash"]     # $r  : 결과 레지스터, 8비트 (왼→오: MSB..LSB)

# ---------------------------------------------------------------------
# 불리언 LED용 온/오프 색 (비트/플래그 공통)
# ---------------------------------------------------------------------
_ON  = (0, 255, 0)     # ON:  초록
_OFF = (120, 0, 0)     # OFF: 어두운 적색

# ---------------------------------------------------------------------
# CPU/메모리에서 불리언 LED로 인식할 키 집합
# (DataMemoryRGBVisual.get/set 이 이 목록에 있는 라벨은 0/1로 다룸)
# - 비트 레지스터(SRC1/SRC2/RES)의 각 라벨은 반드시 여기에 등록되어야 함
# - 이후 FLAG_LABELS(아래)도 병합하여 플래그 LED를 불리언으로 처리
# ---------------------------------------------------------------------
BINARY_COLORS = {}

# 비트 레지스터용 불리언 색 매핑
BINARY_COLORS.update({k: (_ON, _OFF) for k in SRC1})
BINARY_COLORS.update({k: (_ON, _OFF) for k in SRC2})
BINARY_COLORS.update({k: (_ON, _OFF) for k in RES})

# ---------------------------------------------------------------------
# IR (명령어 레지스터)
# ---------------------------------------------------------------------
# F1~F4 = OP코드, F5~F12 = 오퍼랜드/모드 (표시 목적)
IR12 = ["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12"]

# ---------------------------------------------------------------------
# PC (프로그램 카운터, 10진 표시안)
# ---------------------------------------------------------------------
# 10개의 LED로 0~9까지 표시(십의 자리/일의 자리 등 외부 로직과 결합)
PC = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]

# ---------------------------------------------------------------------
# CPU 플래그 LED 전용 프리셋
# 왼쪽 하단 키 예시: Z=Left Control, N=Left Windows, V=Left Alt
# (실제 키 라벨은 장치에 맞게 조정 가능)
# ---------------------------------------------------------------------
FLAG_LABELS = {
    "Z": "left_ctrl",  # Zero flag
    "N": "left_win",   # Negative flag
    "V": "left_alt",   # oVerflow flag
}

# 플래그 LED 색상(가독성 좋은 별도 팔레트 사용)
BINARY_COLORS.update({
    "left_ctrl": ((0, 255, 64), (80, 80, 80)),   # Z
    "left_win":  ((0, 128, 255), (80, 80, 80)),  # N
    "left_alt":  ((255, 200, 0), (80, 80, 80)),  # V
})

# 사용자가 변수로 사용한다고 지정한 키 목록
VARIABLE_KEYS = {'q', 'w', 'e', 'r', 'a', 's', 'd', 'z', 'x'}